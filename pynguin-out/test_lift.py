# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lift as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2803
    lift_0 = module_0.Lift(int_0, int_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.go_up()
    assert lift_0.current_floor == 1
    var_1 = lift_0.add_riders(int_0)
    assert lift_0.num_riders == 2803
    var_1.go_down()


def test_case_1():
    bool_0 = True
    lift_0 = module_0.Lift(bool_0, bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.call(bool_0)
    assert lift_0.current_floor == 1


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    lift_0 = module_0.Lift(bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.go_down()
    var_0.is_full()


def test_case_3():
    bool_0 = True
    list_0 = [bool_0, bool_0]
    lift_0 = module_0.Lift(list_0, list_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "Hc2I+^\x0ch\rc3N9hR~<r"
    lift_0 = module_0.Lift(str_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_top_floor()
    var_0.is_full()


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "96Z\r|rkTO]x"
    set_0 = set()
    lift_0 = module_0.Lift(str_0, set_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_current_floor()
    assert var_0 == 0
    var_0.go_down()


@pytest.mark.xfail(strict=True)
def test_case_6():
    object_0 = module_1.object()
    lift_0 = module_0.Lift(object_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    none_type_0 = None
    lift_1 = module_0.Lift(none_type_0, none_type_0)
    assert lift_1.current_floor == 0
    assert lift_1.num_riders == 0
    var_0 = lift_0.get_capacity()
    assert var_0 == 10
    var_0.get_top_floor()


@pytest.mark.xfail(strict=True)
def test_case_7():
    set_0 = set()
    lift_0 = module_0.Lift(set_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_num_riders()
    assert var_0 == 0
    var_0.get_capacity()


@pytest.mark.xfail(strict=True)
def test_case_8():
    bytes_0 = b"\xde\x86"
    set_0 = {bytes_0}
    lift_0 = module_0.Lift(set_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_top_floor()
    var_1 = lift_0.is_full()
    assert var_1 is False
    var_1.add_riders(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    float_0 = 964.23827
    lift_0 = module_0.Lift(bool_0, bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.add_riders(float_0)
    var_1 = lift_0.call(bool_0)
    var_2 = lift_0.go_up()
    var_3 = lift_0.get_current_floor()
    assert var_3 == 0
    var_3.is_full()


@pytest.mark.xfail(strict=True)
def test_case_10():
    bool_0 = True
    float_0 = 964.23827
    lift_0 = module_0.Lift(bool_0, bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_num_riders()
    assert var_0 == 0
    var_1 = lift_0.add_riders(float_0)
    assert lift_0.num_riders is True
    var_2 = lift_0.call(bool_0)
    assert lift_0.current_floor == 1
    var_3 = lift_0.go_up()
    lift_1 = module_0.Lift(bool_0)
    assert lift_1.current_floor == 0
    assert lift_1.capacity == 10
    assert lift_1.num_riders == 0
    var_4 = lift_0.call(var_0)
    assert lift_0.current_floor == 0
    lift_1.add_riders(lift_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    lift_0 = module_0.Lift(bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.go_up()
    var_0.is_full()


@pytest.mark.xfail(strict=True)
def test_case_12():
    bool_0 = True
    float_0 = 995.3162367066085
    lift_0 = module_0.Lift(bool_0, bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.add_riders(float_0)
    assert lift_0.num_riders is True
    var_1 = lift_0.call(float_0)
    lift_1 = module_0.Lift(bool_0)
    assert lift_1.current_floor == 0
    assert lift_1.capacity == 10
    assert lift_1.num_riders == 0
    var_2 = lift_1.get_current_floor()
    assert var_2 == 0
    lift_1.add_riders(lift_1)


@pytest.mark.xfail(strict=True)
def test_case_13():
    bool_0 = False
    lift_0 = module_0.Lift(bool_0, bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.get_num_riders()
    assert var_0 == 0
    var_1 = lift_0.call(bool_0)
    var_2 = lift_0.go_up()
    var_0.add_riders(var_0)


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = True
    float_0 = -1396.3692
    lift_0 = module_0.Lift(bool_0, bool_0)
    assert lift_0.current_floor == 0
    assert lift_0.num_riders == 0
    var_0 = lift_0.call(float_0)
    var_1 = lift_0.call(bool_0)
    assert lift_0.current_floor == 1
    var_2 = lift_0.go_up()
    lift_1 = module_0.Lift(bool_0)
    assert lift_1.current_floor == 0
    assert lift_1.capacity == 10
    assert lift_1.num_riders == 0
    var_3 = lift_1.get_current_floor()
    assert var_3 == 0
    lift_1.add_riders(lift_1)


@pytest.mark.xfail(strict=True)
def test_case_15():
    int_0 = 2660
    lift_0 = module_0.Lift(int_0)
    assert lift_0.current_floor == 0
    assert lift_0.capacity == 10
    assert lift_0.num_riders == 0
    var_0 = lift_0.call(int_0)
    assert lift_0.current_floor == 2660
    var_0.get_num_riders()
